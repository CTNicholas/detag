{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/**\r\n * Converts tagged template literal parameters into a regular string parameter.\r\n * @param args DetagArgs - An array of arguments from the detagged function\r\n * @param defaultValue any - Return a default value if string argument is empty\r\n * @param ignoreEscapeChars boolean - Set true to not process escape characters (ie \\n)\r\n */\r\nfunction detag (\r\n  args: any = undefined,\r\n  defaultValue: any = undefined,\r\n  ignoreEscapeChars: boolean = false\r\n): string | (() => {}) | null {\r\n  const allArgs = [args, defaultValue, ignoreEscapeChars]\r\n\r\n  // If function passed, try wrap with detag\r\n  if (isFunction(args)) {\r\n    return handleWrappedFunction(allArgs)\r\n  }\r\n\r\n  // Error, no array passed, or array empty\r\n  if (!isArray(args) || args.length < 1) {\r\n    return null\r\n  }\r\n\r\n  // If single array element is string, this is a normal function call\r\n  if (isString(args[0]) && args.length === 1) {\r\n    return handleNormalFunction(allArgs)\r\n  }\r\n\r\n  // Error, first array value is not a valid template literal\r\n  if (!isArray(args[0]) || !isString(args[0][0])) {\r\n    return null\r\n  }\r\n\r\n  // Valid template literal passed\r\n  return handleTaggedFunction(allArgs)\r\n}\r\n\r\n/**\r\n * Loop through and return a string from the template literal parameter values.\r\n * If default value is set, and string is empty, return default value.\r\n * @param args\r\n * @param defaultValue\r\n * @param ignoreEscapeChars\r\n */\r\nfunction handleTaggedFunction ([args, defaultValue, ignoreEscapeChars]: any[]): string | any {\r\n  let [literals, ...subs]: [string[], any[]] = args\r\n  let result: string = ''\r\n\r\n  if (ignoreEscapeChars === true) {\r\n    // @ts-ignore\r\n    literals = literals.raw\r\n  }\r\n\r\n  for (let i = 0; i < literals.length; i++) {\r\n    result += `${literals[i]}${subs[i] || ''}`\r\n  }\r\n\r\n  if (defaultValue && result.length < 1) {\r\n    return defaultValue\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Return the first value of args as a string. If default value is set, and\r\n * string is empty, return default value.\r\n * @param args\r\n * @param defaultValue\r\n */\r\nfunction handleNormalFunction ([args, defaultValue]: any[]): string | any {\r\n  if (defaultValue !== undefined && args[0].length < 1) {\r\n    return defaultValue\r\n  }\r\n\r\n  return `${args[0]}`\r\n}\r\n\r\nfunction handleWrappedFunction (allArgs): () => {} {\r\n  const [wrappedFunc, defaultVal = undefined, ignoreEscape = false] = allArgs\r\n  return (...args) => {\r\n    const detagged = detag(args, defaultVal, ignoreEscape)\r\n    return wrappedFunc(detagged)\r\n  }\r\n}\r\n\r\n// Helper functions\r\nfunction isFunction (arg: any): boolean {\r\n  return arg instanceof Function\r\n}\r\n\r\nfunction isArray (arg: any): boolean {\r\n  return Array.isArray(arg)\r\n}\r\n\r\nfunction isString (arg: any): boolean {\r\n  return typeof arg === 'string' || arg instanceof String\r\n}\r\n\r\n// Converted to ESM by bundler\r\nmodule.exports = detag\r\n"],
  "mappings": "sEAAA,gBAMA,WACE,EAAY,OACZ,EAAoB,OACpB,EAA6B,GACD,CAC5B,GAAM,GAAU,CAAC,EAAM,EAAc,GAGrC,MAAI,GAAW,GACN,EAAsB,GAI3B,CAAC,EAAQ,IAAS,EAAK,OAAS,EAC3B,KAIL,EAAS,EAAK,KAAO,EAAK,SAAW,EAChC,EAAqB,GAI1B,CAAC,EAAQ,EAAK,KAAO,CAAC,EAAS,EAAK,GAAG,IAClC,KAIF,EAAqB,GAU9B,WAA+B,CAAC,EAAM,EAAc,GAAyC,CAC3F,GAAI,CAAC,KAAa,GAA2B,EACzC,EAAiB,GAErB,AAAI,IAAsB,IAExB,GAAW,EAAS,KAGtB,OAAS,GAAI,EAAG,EAAI,EAAS,OAAQ,IACnC,GAAU,GAAG,EAAS,KAAK,EAAK,IAAM,KAGxC,MAAI,IAAgB,EAAO,OAAS,EAC3B,EAGF,EAST,WAA+B,CAAC,EAAM,GAAoC,CACxE,MAAI,KAAiB,QAAa,EAAK,GAAG,OAAS,EAC1C,EAGF,GAAG,EAAK,KAGjB,WAAgC,EAAmB,CACjD,GAAM,CAAC,EAAa,EAAa,OAAW,EAAe,IAAS,EACpE,MAAO,IAAI,IAAS,CAClB,GAAM,GAAW,EAAM,EAAM,EAAY,GACzC,MAAO,GAAY,IAKvB,WAAqB,EAAmB,CACtC,MAAO,aAAe,UAGxB,WAAkB,EAAmB,CACnC,MAAO,OAAM,QAAQ,GAGvB,WAAmB,EAAmB,CACpC,MAAO,OAAO,IAAQ,UAAY,YAAe,QAInD,EAAO,QAAU",
  "names": []
}
